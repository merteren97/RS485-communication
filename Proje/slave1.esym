D G "__PCM__" 0 269 ""5.049""
D G "__DEVICE__" 0 269 "877"
D G "__DATE__" 0 269 ""20-May-21""
D G "__TIME__" 0 269 ""01:08:25""
D G "_UNICODE" 0 269 ""?""
D G "__EVAL" 0 269 ""?"" "Paketin Protokolü:"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `55 
f B "set_tris_b" 1 38 "void(int8 value)" `54 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `57 
f B "set_tris_c" 1 39 "void(int8 value)" `56 
f N "set_tris_d" 1 40 ""
v L "value" 1 40 "int8" `59 
f B "set_tris_d" 1 40 "void(int8 value)" `58 
f N "set_tris_e" 1 41 ""
v L "value" 1 41 "int8" `61 
f B "set_tris_e" 1 41 "void(int8 value)" `60 
f N "get_tris_a" 1 42 ""
f B "get_tris_a" 1 42 "int8()" `62 
f N "get_tris_b" 1 43 ""
f B "get_tris_b" 1 43 "int8()" `63 
f N "get_tris_c" 1 44 ""
f B "get_tris_c" 1 44 "int8()" `64 
f N "get_tris_d" 1 45 ""
f B "get_tris_d" 1 45 "int8()" `65 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `66 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `68 
f B "output_a" 1 47 "void(int8 value)" `67 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `70 
f B "output_b" 1 48 "void(int8 value)" `69 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `72 
f B "output_c" 1 49 "void(int8 value)" `71 
f N "output_d" 1 50 ""
v L "value" 1 50 "int8" `74 
f B "output_d" 1 50 "void(int8 value)" `73 
f N "output_e" 1 51 ""
v L "value" 1 51 "int8" `76 
f B "output_e" 1 51 "void(int8 value)" `75 
f N "input_a" 1 52 ""
f B "input_a" 1 52 "int8()" `77 
f N "input_b" 1 53 ""
f B "input_b" 1 53 "int8()" `78 
f N "input_c" 1 54 ""
f B "input_c" 1 54 "int8()" `79 
f N "input_d" 1 55 ""
f B "input_d" 1 55 "int8()" `80 
f N "input_e" 1 56 ""
f B "input_e" 1 56 "int8()" `81 
f N "input_change_a" 1 57 ""
f B "input_change_a" 1 57 "int8()" `82 
f N "input_change_b" 1 58 ""
f B "input_change_b" 1 58 "int8()" `83 
f N "input_change_c" 1 59 ""
f B "input_change_c" 1 59 "int8()" `84 
f N "input_change_d" 1 60 ""
f B "input_change_d" 1 60 "int8()" `85 
f N "input_change_e" 1 61 ""
f B "input_change_e" 1 61 "int8()" `86 
f N "port_b_pullups" 1 62 ""
v L "value" 1 62 "int8" `88 
f B "port_b_pullups" 1 62 "void(int8 value)" `87 
f N "input" 1 63 ""
v L "pin" 1 63 "int16" `90 
f B "input" 1 63 "int8(int16 pin)" `89 
f N "input_state" 1 64 ""
v L "pin" 1 64 "int16" `92 
f B "input_state" 1 64 "int8(int16 pin)" `91 
f N "output_low" 1 65 ""
v L "pin" 1 65 "int16" `94 
f B "output_low" 1 65 "void(int16 pin)" `93 
f N "output_high" 1 66 ""
v L "pin" 1 66 "int16" `96 
f B "output_high" 1 66 "void(int16 pin)" `95 
f N "output_toggle" 1 67 ""
v L "pin" 1 67 "int16" `98 
f B "output_toggle" 1 67 "void(int16 pin)" `97 
f N "output_bit" 1 68 ""
v L "pin" 1 68 "int16" `100 
v L "level" 1 68 "int8" `101 
f B "output_bit" 1 68 "void(int16 pin,int8 level)" `99 
f N "output_float" 1 69 ""
v L "pin" 1 69 "int16" `103 
f B "output_float" 1 69 "void(int16 pin)" `102 
f N "output_drive" 1 70 ""
v L "pin" 1 70 "int16" `105 
f B "output_drive" 1 70 "void(int16 pin)" `104  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 74 "40"
d G "PIN_A1" 1 75 "41"
d G "PIN_A2" 1 76 "42"
d G "PIN_A3" 1 77 "43"
d G "PIN_A4" 1 78 "44"
d G "PIN_A5" 1 79 "45"
d G "PIN_B0" 1 81 "48"
d G "PIN_B1" 1 82 "49"
d G "PIN_B2" 1 83 "50"
d G "PIN_B3" 1 84 "51"
d G "PIN_B4" 1 85 "52"
d G "PIN_B5" 1 86 "53"
d G "PIN_B6" 1 87 "54"
d G "PIN_B7" 1 88 "55"
d G "PIN_C0" 1 90 "56"
d G "PIN_C1" 1 91 "57"
d G "PIN_C2" 1 92 "58"
d G "PIN_C3" 1 93 "59"
d G "PIN_C4" 1 94 "60"
d G "PIN_C5" 1 95 "61"
d G "PIN_C6" 1 96 "62"
d G "PIN_C7" 1 97 "63"
d G "PIN_D0" 1 99 "64"
d G "PIN_D1" 1 100 "65"
d G "PIN_D2" 1 101 "66"
d G "PIN_D3" 1 102 "67"
d G "PIN_D4" 1 103 "68"
d G "PIN_D5" 1 104 "69"
d G "PIN_D6" 1 105 "70"
d G "PIN_D7" 1 106 "71"
d G "PIN_E0" 1 108 "72"
d G "PIN_E1" 1 109 "73"
d G "PIN_E2" 1 110 "74"
d G "FALSE" 1 113 "0"
d G "TRUE" 1 114 "1"
d G "BYTE" 1 116 "int8"
d G "BOOLEAN" 1 117 "int1"
d G "getc" 1 119 "getch"
d G "fgetc" 1 120 "getch"
d G "getchar" 1 121 "getch"
d G "putc" 1 122 "putchar"
d G "fputc" 1 123 "putchar"
d G "fgets" 1 124 "gets"
d G "fputs" 1 125 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 130 ""
f B "restart_cause" 1 130 "int8()" `106 
f N "reset_cpu" 1 131 ""
f B "reset_cpu" 1 131 "void()" `107 
f N "sleep" 1 132 ""
f B "sleep" 1 132 "void()" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 134 "3"
d G "WDT_TIMEOUT" 1 135 "11"
d G "MCLR_FROM_SLEEP" 1 136 "19"
d G "MCLR_FROM_RUN" 1 137 "27"
d G "NORMAL_POWER_UP" 1 138 "25"
d G "BROWNOUT_RESTART" 1 139 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 146 ""
v L "mode" 1 146 "int8" `110 
f B "setup_timer_0" 1 146 "void(int8 mode)" `109 
f N "set_timer0" 1 147 ""
v L "value" 1 147 "int8" `112 
f B "set_timer0" 1 147 "void(int8 value)" `111 
f N "get_timer0" 1 148 ""
f B "get_timer0" 1 148 "int8()" `113 
f N "setup_counters" 1 149 ""
v L "mode" 1 149 "int8" `115 
v L "prescaler" 1 149 "int8" `116 
f B "setup_counters" 1 149 "void(int8 mode,int8 prescaler)" `114 
f N "set_rtcc" 1 150 ""
v L "value" 1 150 "int8" `118 
f B "set_rtcc" 1 150 "void(int8 value)" `117 
f N "get_rtcc" 1 151 ""
f B "get_rtcc" 1 151 "int8()" `119  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 153 "0"
d G "T0_EXT_L_TO_H" 1 154 "32"
d G "T0_EXT_H_TO_L" 1 155 "48"
d G "T0_DIV_1" 1 157 "8"
d G "T0_DIV_2" 1 158 "0"
d G "T0_DIV_4" 1 159 "1"
d G "T0_DIV_8" 1 160 "2"
d G "T0_DIV_16" 1 161 "3"
d G "T0_DIV_32" 1 162 "4"
d G "T0_DIV_64" 1 163 "5"
d G "T0_DIV_128" 1 164 "6"
d G "T0_DIV_256" 1 165 "7"
d G "T0_8_BIT" 1 168 "0"
d G "RTCC_INTERNAL" 1 172 "0"
d G "RTCC_EXT_L_TO_H" 1 173 "32"
d G "RTCC_EXT_H_TO_L" 1 174 "48"
d G "RTCC_DIV_1" 1 175 "8"
d G "RTCC_DIV_2" 1 176 "0"
d G "RTCC_DIV_4" 1 177 "1"
d G "RTCC_DIV_8" 1 178 "2"
d G "RTCC_DIV_16" 1 179 "3"
d G "RTCC_DIV_32" 1 180 "4"
d G "RTCC_DIV_64" 1 181 "5"
d G "RTCC_DIV_128" 1 182 "6"
d G "RTCC_DIV_256" 1 183 "7"
d G "RTCC_8_BIT" 1 184 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 195 ""
v L "mode" 1 195 "int16" `121 
f B "setup_wdt" 1 195 "void(int16 mode)" `120 
f N "restart_wdt" 1 196 ""
f B "restart_wdt" 1 196 "void()" `122  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 199 "8"
d G "WDT_36MS" 1 200 "9"
d G "WDT_72MS" 1 201 "10"
d G "WDT_144MS" 1 202 "11"
d G "WDT_288MS" 1 203 "12"
d G "WDT_576MS" 1 204 "13"
d G "WDT_1152MS" 1 205 "14"
d G "WDT_2304MS" 1 206 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 212 ""
v L "mode" 1 212 "int16" `124 
f B "setup_timer_1" 1 212 "void(int16 mode)" `123 
f N "get_timer1" 1 213 ""
f B "get_timer1" 1 213 "int16()" `125 
f N "set_timer1" 1 214 ""
v L "value" 1 214 "int16" `127 
f B "set_timer1" 1 214 "void(int16 value)" `126  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 217 "0"
d G "T1_INTERNAL" 1 218 "0x85"
d G "T1_EXTERNAL" 1 219 "0x87"
d G "T1_EXTERNAL_SYNC" 1 220 "0x83"
d G "T1_CLK_OUT" 1 222 "8"
d G "T1_DIV_BY_1" 1 224 "0"
d G "T1_DIV_BY_2" 1 225 "0x10"
d G "T1_DIV_BY_4" 1 226 "0x20"
d G "T1_DIV_BY_8" 1 227 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 232 ""
v L "mode" 1 232 "int8" `129 
v L "period" 1 232 "int8" `130 
v L "postscale" 1 232 "int8" `131 
f B "setup_timer_2" 1 232 "void(int8 mode,int8 period,int8 postscale)" `128 
f N "get_timer2" 1 233 ""
f B "get_timer2" 1 233 "int8()" `132 
f N "set_timer2" 1 234 ""
v L "value" 1 234 "int8" `134 
f B "set_timer2" 1 234 "void(int8 value)" `133  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 236 "0"
d G "T2_DIV_BY_1" 1 237 "4"
d G "T2_DIV_BY_4" 1 238 "5"
d G "T2_DIV_BY_16" 1 239 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 245 ""
v L "mode" 1 245 "int32" `136 
f B "setup_ccp1" 1 245 "void(int32 mode)" `135 
f N "setup_ccp1" 1 246 ""
v L "mode" 1 246 "int32" `138 
v L "pwm" 1 246 "int8" `139 
f B "setup_ccp1" 1 246 "void(int32 mode,int8 pwm)" `137 
f N "set_pwm1_duty" 1 247 ""
v L "value" 1 247 "int16" `141 
f B "set_pwm1_duty" 1 247 "void(int16 value)" `140  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 249 "0"
d G "CCP_CAPTURE_FE" 1 250 "0x04"
d G "CCP_CAPTURE_RE" 1 251 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 252 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 253 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 254 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 255 "0x09"
d G "CCP_COMPARE_INT" 1 256 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 257 "0x0B"
d G "CCP_PWM" 1 258 "0x0C"
d G "CCP_PWM_PLUS_1" 1 259 "0x1c"
d G "CCP_PWM_PLUS_2" 1 260 "0x2c"
d G "CCP_PWM_PLUS_3" 1 261 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 268 ""
v L "mode" 1 268 "int32" `146 
f B "setup_ccp2" 1 268 "void(int32 mode)" `145 
f N "setup_ccp2" 1 269 ""
v L "mode" 1 269 "int32" `148 
v L "pwm" 1 269 "int8" `149 
f B "setup_ccp2" 1 269 "void(int32 mode,int8 pwm)" `147 
f N "set_pwm2_duty" 1 270 ""
v L "value" 1 270 "int16" `151 
f B "set_pwm2_duty" 1 270 "void(int16 value)" `150 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
f N "setup_psp" 1 279 ""
v L "mode" 1 279 "int8" `156 
f B "setup_psp" 1 279 "void(int8 mode)" `155 
f N "psp_output_full" 1 280 ""
f B "psp_output_full" 1 280 "int8()" `157 
f N "psp_input_full" 1 281 ""
f B "psp_input_full" 1 281 "int8()" `158 
f N "psp_overflow" 1 282 ""
f B "psp_overflow" 1 282 "int8()" `159  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 284 "0x10"
d G "PSP_DISABLED" 1 285 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
f N "setup_spi" 1 292 ""
v L "mode" 1 292 "int32" `162 
f B "setup_spi" 1 292 "void(int32 mode)" `161 
f N "spi_write" 1 293 ""
v L "value" 1 293 "int8" `164 
f B "spi_write" 1 293 "void(int8 value)" `163 
f N "spi_read" 1 294 ""
f B "spi_read" 1 294 "int8()" `165 
f N "spi_read" 1 295 ""
v L "value" 1 295 "int8" `167 
f B "spi_read" 1 295 "int8(int8 value)" `166 
f N "spi_data_in" 1 296 ""
f B "spi_data_in" 1 296 "int8()" `168  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 298 "0x00"
d G "SPI_MASTER" 1 299 "0x20"
d G "SPI_SLAVE" 1 300 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 301 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 302 "0x00"
d G "SPI_CLK_DIV_4" 1 303 "0x00"
d G "SPI_CLK_DIV_16" 1 304 "0x01"
d G "SPI_CLK_DIV_64" 1 305 "0x02"
d G "SPI_CLK_T2" 1 306 "0x03"
d G "SPI_SS_DISABLED" 1 307 "0x01"
d G "SPI_XMIT_L_TO_H" 1 309 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 310 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 312 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 313 "0x8000"
d G "SPI_L_TO_H" 1 316 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 317 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
f N "setup_uart" 1 321 ""
v L "baud" 1 321 "int32" `170 
f B "setup_uart" 1 321 "void(int32 baud)" `169 
f N "setup_uart" 1 322 ""
v L "baud" 1 322 "int32" `172 
v L "stream" 1 322 "int8" `173 
f B "setup_uart" 1 322 "void(int32 baud,int8 stream)" `171 
f N "setup_uart" 1 323 ""
v L "baud" 1 323 "int32" `175 
v L "stream" 1 323 "int8" `176 
v L "clock" 1 323 "int32" `177 
f B "setup_uart" 1 323 "void(int32 baud,int8 stream,int32 clock)" `174 
f N "set_uart_speed" 1 324 ""
v L "baud" 1 324 "int32" `179 
f B "set_uart_speed" 1 324 "void(int32 baud)" `178 
f N "set_uart_speed" 1 325 ""
v L "baud" 1 325 "int32" `181 
v L "stream" 1 325 "int8" `182 
f B "set_uart_speed" 1 325 "void(int32 baud,int8 stream)" `180 
f N "set_uart_speed" 1 326 ""
v L "baud" 1 326 "int32" `184 
v L "stream" 1 326 "int8" `185 
v L "clock" 1 326 "int32" `186 
f B "set_uart_speed" 1 326 "void(int32 baud,int8 stream,int32 clock)" `183  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 330 "2"
d G "UART_DATA" 1 331 "4"
c L "set_uart_speed" 1 1 4 "FUNCTION"
f N "setup_adc" 1 338 ""
v L "mode" 1 338 "int16" `188 
f B "setup_adc" 1 338 "void(int16 mode)" `187 
f N "read_adc" 1 339 ""
f B "read_adc" 1 339 "int8()" `189 
f N "read_adc" 1 340 ""
v L "mode" 1 340 "int8" `191 
f B "read_adc" 1 340 "int8(int8 mode)" `190 
f N "read_adc" 1 341 ""
f B "read_adc" 1 341 "int16()" `192 
f N "read_adc" 1 342 ""
v L "mode" 1 342 "int8" `193 
f B "read_adc" 1 342 "int16(int8 mode,int8 setting)" `192 
f N "adc_done" 1 343 ""
f B "adc_done" 1 343 "int8(int8 mode,int8 setting)" `192  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 345 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 346 "0x100"
d G "ADC_CLOCK_DIV_8" 1 347 "0x40"
d G "ADC_CLOCK_DIV_32" 1 348 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 349 "0xc0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 352 ""
v L "setting" 1 352 "int8" `194 
f B "setup_adc_ports" 1 352 "void(int8 setting)" `193 
f N "set_analog_pins" 1 353 ""
v L "setting" 1 353 "int8" `196 
f B "set_analog_pins" 1 353 "void(int8 setting)" `195 
f N "set_adc_channel" 1 354 ""
v L "channel" 1 354 "int8" `198 
f B "set_adc_channel" 1 354 "void(int8 channel)" `197  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 356 "7" "None"
d G "ALL_ANALOG" 1 357 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 358 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 359 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 360 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 361 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 362 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 363 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 364 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 365 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 366 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 367 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 368 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 369 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 370 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 371 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 372 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 373 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 374 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 375 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 376 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 377 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 378 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 379 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 380 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 381 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 382 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 383 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 386 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 387 "1"
d G "ADC_READ_ONLY" 1 388 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 394 ""
v L "x" 1 394 "sint8" `200 
f B "abs" 1 394 "sint8(sint8 x)" `199 
f N "abs" 1 395 ""
v L "x" 1 395 "sint16" `202 
f B "abs" 1 395 "sint16(sint16 x)" `201 
f N "abs" 1 396 ""
v L "x" 1 396 "sint32" `204 
f B "abs" 1 396 "sint32(sint32 x)" `203 
f N "abs" 1 397 ""
v L "x" 1 397 "float" `206 
f B "abs" 1 397 "float(float x)" `205 
f N "_mul" 1 398 ""
v L "??65535" 1 398 "int8" `208 
v L "??65535" 1 398 "int8" `209 
f B "_mul" 1 398 "int16(int8 ,int8 )" `207 
f N "_mul" 1 399 ""
v L "??65535" 1 399 "sint8" `211 
v L "??65535" 1 399 "sint8" `212 
f B "_mul" 1 399 "sint16(sint8 ,sint8 )" `210 
f N "_mul" 1 400 ""
v L "??65535" 1 400 "int16" `214 
v L "??65535" 1 400 "int16" `215 
f B "_mul" 1 400 "int32(int16 ,int16 )" `213 
f N "_mul" 1 401 ""
v L "??65535" 1 401 "sint16" `217 
v L "??65535" 1 401 "sint16" `218 
f B "_mul" 1 401 "sint32(sint16 ,sint16 )" `216  "Memory Manipulation Prototypes:"
f N "read_bank" 1 404 ""
v L "bank" 1 404 "int8" `220 
v L "offset" 1 404 "int8" `221 
f B "read_bank" 1 404 "int8(int8 bank,int8 offset)" `219 
f N "write_bank" 1 405 ""
v L "bank" 1 405 "int8" `223 
v L "offset" 1 405 "int8" `224 
v L "value" 1 405 "int8" `225 
f B "write_bank" 1 405 "void(int8 bank,int8 offset,int8 value)" `222 
f N "strcpy" 1 406 ""
v L "dest" 1 406 "*int8" `227 
v L "src" 1 406 "*int8" `228 
f B "strcpy" 1 406 "void(*int8 dest,*int8 src)" `226 
f N "memset" 1 407 ""
v L "destination" 1 407 "*int8" `230 
v L "value" 1 407 "int8" `231 
v L "num" 1 407 "int16" `232 
f B "memset" 1 407 "void(*int8 destination,int8 value,int16 num)" `229 
f N "memcpy" 1 408 ""
v L "destination" 1 408 "*int8" `234 
v L "source" 1 408 "*int8" `235 
v L "num" 1 408 "int16" `236 
f B "memcpy" 1 408 "void(*int8 destination,*int8 source,int16 num)" `233  "String Prototypes:"
f N "toupper" 1 411 ""
v L "cvalue" 1 411 "int8" `238 
f B "toupper" 1 411 "int8(int8 cvalue)" `237 
f N "tolower" 1 412 ""
v L "cvalue" 1 412 "int8" `240 
f B "tolower" 1 412 "int8(int8 cvalue)" `239 
f N "sprintf" 1 413 ""
v L "string" 1 413 "*int8" `242 
v L "cstring" 1 413 "*int8" `243 
f B "sprintf" 1 413 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `241  "Data Manipulators Prototypes:"
f N "shift_left" 1 416 ""
v L "address" 1 416 "*int8" `246 
v L "bytes" 1 416 "int8" `247 
v L "value" 1 416 "int8" `248 
f B "shift_left" 1 416 "int8(*int8 address,int8 bytes,int8 value)" `245 
f N "shift_right" 1 417 ""
v L "address" 1 417 "*int8" `250 
v L "bytes" 1 417 "int8" `251 
v L "value" 1 417 "int8" `252 
f B "shift_right" 1 417 "int8(*int8 address,int8 bytes,int8 value)" `249 
f N "rotate_left" 1 418 ""
v L "address" 1 418 "*int8" `254 
v L "bytes" 1 418 "int8" `255 
f B "rotate_left" 1 418 "void(*int8 address,int8 bytes)" `253 
f N "rotate_right" 1 419 ""
v L "address" 1 419 "*int8" `257 
v L "bytes" 1 419 "int8" `258 
f B "rotate_right" 1 419 "void(*int8 address,int8 bytes)" `256 
f N "swap" 1 420 ""
v L "value" 1 420 "int8" `260 
f B "swap" 1 420 "void(int8 value)" `259 
f N "make8" 1 421 ""
v L "var" 1 421 "int16" `262 
v L "offset" 1 421 "int8" `263 
f B "make8" 1 421 "int8(int16 var,int8 offset)" `261 
f N "make8" 1 422 ""
v L "var" 1 422 "int32" `265 
v L "offset" 1 422 "int8" `266 
f B "make8" 1 422 "int8(int32 var,int8 offset)" `264 
f N "make16" 1 423 ""
v L "varhigh" 1 423 "int8" `268 
v L "varlow" 1 423 "int8" `269 
f B "make16" 1 423 "int16(int8 varhigh,int8 varlow)" `267 
f N "make32" 1 424 ""
v L "var1" 1 424 "int16" `271 
f B "make32" 1 424 "int32(int16 var1)" `270 
f N "make32" 1 425 ""
v L "var1" 1 425 "int16" `273 
v L "var2" 1 425 "int16" `274 
f B "make32" 1 425 "int32(int16 var1,int16 var2)" `272 
f N "make32" 1 426 ""
v L "var1" 1 426 "int16" `276 
v L "var2" 1 426 "int8" `277 
f B "make32" 1 426 "int32(int16 var1,int8 var2)" `275 
f N "make32" 1 427 ""
v L "var1" 1 427 "int16" `279 
v L "var2" 1 427 "int8" `280 
v L "var3" 1 427 "int8" `281 
f B "make32" 1 427 "int32(int16 var1,int8 var2,int8 var3)" `278 
f N "make32" 1 428 ""
v L "var1" 1 428 "int8" `283 
f B "make32" 1 428 "int32(int8 var1)" `282 
f N "make32" 1 429 ""
v L "var1" 1 429 "int8" `285 
v L "var2" 1 429 "int8" `286 
f B "make32" 1 429 "int32(int8 var1,int8 var2)" `284 
f N "make32" 1 430 ""
v L "var1" 1 430 "int8" `288 
v L "var2" 1 430 "int8" `289 
v L "var3" 1 430 "int8" `290 
f B "make32" 1 430 "int32(int8 var1,int8 var2,int8 var3)" `287 
f N "make32" 1 431 ""
v L "var1" 1 431 "int8" `292 
v L "var2" 1 431 "int8" `293 
v L "var3" 1 431 "int8" `294 
v L "var4" 1 431 "int8" `295 
f B "make32" 1 431 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `291 
f N "make32" 1 432 ""
v L "var1" 1 432 "int8" `297 
v L "var2" 1 432 "int16" `298 
f B "make32" 1 432 "int32(int8 var1,int16 var2)" `296 
f N "make32" 1 433 ""
v L "var1" 1 433 "int8" `300 
v L "var2" 1 433 "int16" `301 
v L "var3" 1 433 "int8" `302 
f B "make32" 1 433 "int32(int8 var1,int16 var2,int8 var3)" `299 
f N "make32" 1 434 ""
v L "var1" 1 434 "int8" `304 
v L "var2" 1 434 "int8" `305 
v L "var3" 1 434 "int16" `306 
f B "make32" 1 434 "int32(int8 var1,int8 var2,int16 var3)" `303 
f N "bit_set" 1 435 ""
v L "var" 1 435 "int8" `308 
v L "bit" 1 435 "int8" `309 
f B "bit_set" 1 435 "void(int8 var,int8 bit)" `307 
f N "bit_set" 1 436 ""
v L "var" 1 436 "int16" `311 
v L "bit" 1 436 "int8" `312 
f B "bit_set" 1 436 "void(int16 var,int8 bit)" `310 
f N "bit_set" 1 437 ""
v L "var" 1 437 "int32" `314 
v L "bit" 1 437 "int8" `315 
f B "bit_set" 1 437 "void(int32 var,int8 bit)" `313 
f N "bit_clear" 1 438 ""
v L "var" 1 438 "int8" `317 
v L "bit" 1 438 "int8" `318 
f B "bit_clear" 1 438 "void(int8 var,int8 bit)" `316 
f N "bit_clear" 1 439 ""
v L "var" 1 439 "int16" `320 
v L "bit" 1 439 "int8" `321 
f B "bit_clear" 1 439 "void(int16 var,int8 bit)" `319 
f N "bit_clear" 1 440 ""
v L "var" 1 440 "int32" `323 
v L "bit" 1 440 "int8" `324 
f B "bit_clear" 1 440 "void(int32 var,int8 bit)" `322 
f N "bit_test" 1 441 ""
v L "var" 1 441 "int8" `326 
v L "bit" 1 441 "int8" `327 
f B "bit_test" 1 441 "int8(int8 var,int8 bit)" `325 
f N "bit_test" 1 442 ""
v L "var" 1 442 "int16" `329 
v L "bit" 1 442 "int8" `330 
f B "bit_test" 1 442 "int8(int16 var,int8 bit)" `328 
f N "bit_test" 1 443 ""
v L "var" 1 443 "int32" `332 
v L "bit" 1 443 "int8" `333 
f B "bit_test" 1 443 "int8(int32 var,int8 bit)" `331  "#use delay() Prototypes:"
f N "delay_cycles" 1 446 ""
v L "count" 1 446 "int8" `335 
f B "delay_cycles" 1 446 "void(int8 count)" `334 
f N "delay_ms" 1 447 ""
v L "time" 1 447 "int16" `337 
f B "delay_ms" 1 447 "void(int16 time)" `336 
f N "delay_us" 1 448 ""
v L "time" 1 448 "int16" `339 
f B "delay_us" 1 448 "void(int16 time)" `338  "#use rs232() Prototypes:"
f N "putchar" 1 451 ""
v L "cdata" 1 451 "int8" `341 
f B "putchar" 1 451 "void(int8 cdata)" `340 
f N "putchar" 1 452 ""
v L "cdata" 1 452 "int8" `343 
v L "stream" 1 452 "int8" `344 
f B "putchar" 1 452 "void(int8 cdata,int8 stream)" `342 
f N "puts" 1 453 ""
v L "string" 1 453 "*int8" `346 
f B "puts" 1 453 "void(*int8 string)" `345 
f N "puts" 1 454 ""
v L "string" 1 454 "*int8" `348 
v L "stream" 1 454 "int8" `349 
f B "puts" 1 454 "void(*int8 string,int8 stream)" `347 
f N "getch" 1 455 ""
f B "getch" 1 455 "int8()" `350 
f N "getch" 1 456 ""
v L "stream" 1 456 "int8" `352 
f B "getch" 1 456 "int8(int8 stream)" `351 
f N "gets" 1 457 ""
v L "string" 1 457 "*int8" `354 
f B "gets" 1 457 "void(*int8 string)" `353 
f N "gets" 1 458 ""
v L "string" 1 458 "*int8" `356 
v L "stream" 1 458 "int8" `357 
f B "gets" 1 458 "void(*int8 string,int8 stream)" `355 
f N "kbhit" 1 459 ""
f B "kbhit" 1 459 "int8()" `358 
f N "kbhit" 1 460 ""
v L "stream" 1 460 "int8" `360 
f B "kbhit" 1 460 "int8(int8 stream)" `359 
f N "printf" 1 461 ""
v L "string" 1 461 "*int8" `362 
f B "printf" 1 461 "void(*int8 string,*int8 _VA_LIST)" `361 
f N "fprintf" 1 462 ""
v L "stream" 1 462 "int8" `365 
v L "string" 1 462 "*int8" `366 
f B "fprintf" 1 462 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `364 
f N "putc_send" 1 463 ""
f B "putc_send" 1 463 "void()" `368 
f N "fputc_send" 1 464 ""
v L "stream" 1 464 "int8" `370 
f B "fputc_send" 1 464 "void(int8 stream)" `369 
f N "rcv_buffer_full" 1 465 ""
f B "rcv_buffer_full" 1 465 "int8()" `371 
f N "rcv_buffer_full" 1 466 ""
v L "stream" 1 466 "int8" `373 
f B "rcv_buffer_full" 1 466 "int8(int8 stream)" `372 
f N "rcv_buffer_bytes" 1 467 ""
f B "rcv_buffer_bytes" 1 467 "int16()" `374 
f N "rcv_buffer_bytes" 1 468 ""
v L "stream" 1 468 "int8" `376 
f B "rcv_buffer_bytes" 1 468 "int16(int8 stream)" `375 
f N "tx_buffer_full" 1 469 ""
f B "tx_buffer_full" 1 469 "int8()" `377 
f N "tx_buffer_full" 1 470 ""
v L "stream" 1 470 "int8" `379 
f B "tx_buffer_full" 1 470 "int8(int8 stream)" `378 
f N "tx_buffer_bytes" 1 471 ""
f B "tx_buffer_bytes" 1 471 "int16()" `380 
f N "tx_buffer_bytes" 1 472 ""
v L "stream" 1 472 "int8" `382 
f B "tx_buffer_bytes" 1 472 "int16(int8 stream)" `381  "#use i2c() Prototypes:"
f N "i2c_read" 1 475 ""
f B "i2c_read" 1 475 "int8()" `383 
f N "i2c_read" 1 476 ""
v L "stream" 1 476 "int8" `385 
f B "i2c_read" 1 476 "int8(int8 stream)" `384 
f N "i2c_read" 1 477 ""
v L "stream" 1 477 "int8" `387 
v L "ack" 1 477 "int8" `388 
f B "i2c_read" 1 477 "int8(int8 stream,int8 ack)" `386 
f N "i2c_write" 1 478 ""
v L "data" 1 478 "int8" `390 
f B "i2c_write" 1 478 "int8(int8 data)" `389 
f N "i2c_write" 1 479 ""
v L "stream" 1 479 "int8" `392 
v L "data" 1 479 "int8" `393 
f B "i2c_write" 1 479 "int8(int8 stream,int8 data)" `391 
f N "i2c_start" 1 480 ""
f B "i2c_start" 1 480 "void()" `394 
f N "i2c_start" 1 481 ""
v L "stream" 1 481 "int8" `396 
f B "i2c_start" 1 481 "void(int8 stream)" `395 
f N "i2c_start" 1 482 ""
v L "stream" 1 482 "int8" `398 
v L "restart" 1 482 "int8" `399 
f B "i2c_start" 1 482 "void(int8 stream,int8 restart)" `397 
f N "i2c_stop" 1 483 ""
f B "i2c_stop" 1 483 "void()" `400 
f N "i2c_stop" 1 484 ""
v L "stream" 1 484 "int8" `402 
f B "i2c_stop" 1 484 "void(int8 stream)" `401 
f N "i2c_isr_state" 1 485 ""
f B "i2c_isr_state" 1 485 "int8()" `403 
f N "i2c_slaveaddr" 1 486 ""
v L "addr" 1 486 "int8" `405 
f B "i2c_slaveaddr" 1 486 "void(int8 addr)" `404 
f N "i2c_slaveaddr" 1 487 ""
v L "stream" 1 487 "int8" `407 
v L "addr" 1 487 "int8" `408 
f B "i2c_slaveaddr" 1 487 "void(int8 stream,int8 addr)" `406 
f N "i2c_poll" 1 488 ""
f B "i2c_poll" 1 488 "int8()" `409 
f N "i2c_poll" 1 489 ""
v L "stream" 1 489 "int8" `411 
f B "i2c_poll" 1 489 "int8(int8 stream)" `410 
f N "i2c_init" 1 490 ""
v L "baud" 1 490 "int32" `413 
f B "i2c_init" 1 490 "void(int32 baud)" `412 
f N "i2c_init" 1 491 ""
v L "stream" 1 491 "int8" `415 
v L "baud" 1 491 "int32" `416 
f B "i2c_init" 1 491 "void(int8 stream,int32 baud)" `414  "#use spi() Prototypes:"
f N "spi_xfer" 1 494 ""
f B "spi_xfer" 1 494 "int8()" `417 
f N "spi_xfer" 1 495 ""
f B "spi_xfer" 1 495 "int16(int8 data)" `418 
f N "spi_xfer" 1 496 ""
f B "spi_xfer" 1 496 "int32(int8 data)" `418 
f N "spi_xfer" 1 497 ""
v L "data" 1 497 "int8" `419 
f B "spi_xfer" 1 497 "int8(int8 data)" `418 
f N "spi_xfer" 1 498 ""
v L "data" 1 498 "int16" `421 
f B "spi_xfer" 1 498 "int16(int16 data)" `420 
f N "spi_xfer" 1 499 ""
v L "data" 1 499 "int32" `423 
f B "spi_xfer" 1 499 "int32(int32 data)" `422 
f N "spi_xfer" 1 500 ""
v L "stream" 1 500 "int8" `425 
v L "data" 1 500 "int8" `426 
f B "spi_xfer" 1 500 "int8(int8 stream,int8 data)" `424 
f N "spi_xfer" 1 501 ""
v L "stream" 1 501 "int8" `428 
v L "data" 1 501 "int16" `429 
f B "spi_xfer" 1 501 "int16(int8 stream,int16 data)" `427 
f N "spi_xfer" 1 502 ""
v L "stream" 1 502 "int8" `431 
v L "data" 1 502 "int32" `432 
f B "spi_xfer" 1 502 "int32(int8 stream,int32 data)" `430 
f N "spi_xfer" 1 503 ""
v L "stream" 1 503 "int8" `434 
v L "data" 1 503 "int8" `435 
v L "bits" 1 503 "int8" `436 
f B "spi_xfer" 1 503 "int8(int8 stream,int8 data,int8 bits)" `433 
f N "spi_xfer" 1 504 ""
v L "stream" 1 504 "int8" `438 
v L "data" 1 504 "int16" `439 
v L "bits" 1 504 "int8" `440 
f B "spi_xfer" 1 504 "int16(int8 stream,int16 data,int8 bits)" `437 
f N "spi_xfer" 1 505 ""
v L "stream" 1 505 "int8" `442 
v L "data" 1 505 "int32" `443 
v L "bits" 1 505 "int8" `444 
f B "spi_xfer" 1 505 "int32(int8 stream,int32 data,int8 bits)" `441 
f N "spi_init" 1 506 ""
v L "baud" 1 506 "int32" `446 
f B "spi_init" 1 506 "void(int32 baud)" `445 
f N "spi_init" 1 507 ""
v L "stream" 1 507 "int8" `448 
v L "baud" 1 507 "int32" `449 
f B "spi_init" 1 507 "void(int8 stream,int32 baud)" `447 
f N "spi_speed" 1 508 ""
v L "baud" 1 508 "int32" `451 
f B "spi_speed" 1 508 "void(int32 baud)" `450 
f N "spi_speed" 1 509 ""
v L "stream" 1 509 "int8" `453 
v L "baud" 1 509 "int32" `454 
f B "spi_speed" 1 509 "void(int8 stream,int32 baud)" `452 
f N "spi_speed" 1 510 ""
v L "stream" 1 510 "int8" `456 
v L "baud" 1 510 "int32" `457 
v L "clock" 1 510 "int32" `458 
f B "spi_speed" 1 510 "void(int8 stream,int32 baud,int32 clock)" `455 
f N "spi_prewrite" 1 511 ""
v L "data" 1 511 "int8" `460 
f B "spi_prewrite" 1 511 "void(int8 data)" `459 
f N "spi_prewrite" 1 512 ""
v L "data" 1 512 "int16" `462 
f B "spi_prewrite" 1 512 "void(int16 data)" `461 
f N "spi_prewrite" 1 513 ""
v L "data" 1 513 "int32" `464 
f B "spi_prewrite" 1 513 "void(int32 data)" `463 
f N "spi_prewrite" 1 514 ""
v L "??65535" 1 514 "int8" `466 
v L "data" 1 514 "int8" `467 
f B "spi_prewrite" 1 514 "void(int8 ,int8 data)" `465 
f N "spi_prewrite" 1 515 ""
v L "??65535" 1 515 "int8" `469 
v L "data" 1 515 "int16" `470 
f B "spi_prewrite" 1 515 "void(int8 ,int16 data)" `468 
f N "spi_prewrite" 1 516 ""
v L "??65535" 1 516 "int8" `472 
v L "data" 1 516 "int32" `473 
f B "spi_prewrite" 1 516 "void(int8 ,int32 data)" `471 
f N "spi_xfer_in" 1 517 ""
f B "spi_xfer_in" 1 517 "int8()" `474 
f N "spi_xfer_in" 1 518 ""
f B "spi_xfer_in" 1 518 "int16(int8 bits)" `475 
f N "spi_xfer_in" 1 519 ""
f B "spi_xfer_in" 1 519 "int32(int8 bits)" `475 
f N "spi_xfer_in" 1 520 ""
v L "bits" 1 520 "int8" `476 
f B "spi_xfer_in" 1 520 "int8(int8 bits)" `475 
f N "spi_xfer_in" 1 521 ""
v L "bits" 1 521 "int8" `478 
f B "spi_xfer_in" 1 521 "int16(int8 bits,int8 bits)" `477 
f N "spi_xfer_in" 1 522 ""
v L "bits" 1 522 "int8" `478 
f B "spi_xfer_in" 1 522 "int32(int8 bits,int8 bits)" `477 
f N "spi_xfer_in" 1 523 ""
v L "stream" 1 523 "int8" `478 
v L "bits" 1 523 "int8" `479 
f B "spi_xfer_in" 1 523 "int8(int8 stream,int8 bits)" `477 
f N "spi_xfer_in" 1 524 ""
v L "stream" 1 524 "int8" `478 
v L "bits" 1 524 "int8" `482 
f B "spi_xfer_in" 1 524 "int16(int8 stream,int8 bits,int8 task)" `480 
f N "spi_xfer_in" 1 525 ""
v L "stream" 1 525 "int8" `478 
v L "bits" 1 525 "int8" `482 
f B "spi_xfer_in" 1 525 "int32(int8 stream,int8 bits,int8 task)" `480  "#use rtos() Prototypes:"
f N "rtos_run" 1 528 ""
f B "rtos_run" 1 528 "void(int8 stream,int8 bits,int8 task)" `480 
f N "rtos_yield" 1 529 ""
f B "rtos_yield" 1 529 "void(int8 bits,int8 task)" `481 
f N "rtos_enable" 1 530 ""
v L "task" 1 530 "int8" `483 
f B "rtos_enable" 1 530 "void(int8 task)" `482 
f N "rtos_disable" 1 531 ""
v L "task" 1 531 "int8" `485 
f B "rtos_disable" 1 531 "void(int8 task)" `484 
f N "rtos_terminate" 1 532 ""
f B "rtos_terminate" 1 532 "void()" `486 
f N "rtos_await" 1 533 ""
v L "flag" 1 533 "int8" `488 
f B "rtos_await" 1 533 "void(int8 flag)" `487 
f N "rtos_wait" 1 534 ""
v L "sem" 1 534 "int8" `490 
f B "rtos_wait" 1 534 "void(int8 sem)" `489 
f N "rtos_signal" 1 535 ""
v L "sem" 1 535 "int8" `492 
f B "rtos_signal" 1 535 "void(int8 sem)" `491 
f N "rtos_msg_send" 1 536 ""
v L "task" 1 536 "int8" `494 
v L "msg" 1 536 "int8" `495 
f B "rtos_msg_send" 1 536 "void(int8 task,int8 msg)" `493 
f N "rtos_msg_read" 1 537 ""
f B "rtos_msg_read" 1 537 "int8()" `496 
f N "rtos_msg_poll" 1 538 ""
f B "rtos_msg_poll" 1 538 "int8()" `497 
f N "rtos_overrun" 1 539 ""
v L "task" 1 539 "int8" `499 
f B "rtos_overrun" 1 539 "int8(int8 task)" `498 
f N "rtos_stats" 1 540 ""
v L "task" 1 540 "int8" `501 
v L "stat" 1 540 "*int8" `502 
f B "rtos_stats" 1 540 "void(int8 task,*int8 stat)" `500  "#use timer() Prototypes:"
f N "get_ticks" 1 543 ""
f B "get_ticks" 1 543 "int8()" `503 
f N "get_ticks" 1 544 ""
f B "get_ticks" 1 544 "int16(int8 stream)" `504 
f N "get_ticks" 1 545 ""
f B "get_ticks" 1 545 "int32(int8 stream)" `504 
f N "get_ticks" 1 546 ""
v L "stream" 1 546 "int8" `505 
f B "get_ticks" 1 546 "int8(int8 stream)" `504 
f N "get_ticks" 1 547 ""
v L "stream" 1 547 "int8" `507 
f B "get_ticks" 1 547 "int16(int8 stream)" `506 
f N "get_ticks" 1 548 ""
v L "stream" 1 548 "int8" `507 
f B "get_ticks" 1 548 "int32(int8 stream)" `506 
f N "set_ticks" 1 549 ""
v L "value" 1 549 "int8" `507 
f B "set_ticks" 1 549 "void(int8 value)" `506 
f N "set_ticks" 1 550 ""
v L "value" 1 550 "int16" `509 
f B "set_ticks" 1 550 "void(int16 value)" `508 
f N "set_ticks" 1 551 ""
v L "value" 1 551 "int32" `511 
f B "set_ticks" 1 551 "void(int32 value)" `510 
f N "set_ticks" 1 552 ""
v L "stream" 1 552 "int8" `513 
v L "value" 1 552 "int8" `514 
f B "set_ticks" 1 552 "void(int8 stream,int8 value)" `512 
f N "set_ticks" 1 553 ""
v L "stream" 1 553 "int8" `516 
v L "value" 1 553 "int16" `517 
f B "set_ticks" 1 553 "void(int8 stream,int16 value)" `515 
f N "set_ticks" 1 554 ""
v L "stream" 1 554 "int8" `519 
v L "value" 1 554 "int32" `520 
f B "set_ticks" 1 554 "void(int8 stream,int32 value)" `518  "#use pwm() Prototypes:"
f N "pwm_on" 1 557 ""
f B "pwm_on" 1 557 "void()" `521 
f N "pwm_on" 1 558 ""
v L "stream" 1 558 "int8" `523 
f B "pwm_on" 1 558 "void(int8 stream)" `522 
f N "pwm_off" 1 559 ""
f B "pwm_off" 1 559 "void()" `524 
f N "pwm_off" 1 560 ""
v L "stream" 1 560 "int8" `526 
f B "pwm_off" 1 560 "void(int8 stream)" `525 
f N "pwm_set_duty" 1 561 ""
v L "duty" 1 561 "int16" `528 
f B "pwm_set_duty" 1 561 "void(int16 duty)" `527 
f N "pwm_set_duty" 1 562 ""
v L "stream" 1 562 "int8" `530 
v L "duty" 1 562 "int16" `531 
f B "pwm_set_duty" 1 562 "void(int8 stream,int16 duty)" `529 
f N "pwm_set_duty_percent" 1 563 ""
v L "percent" 1 563 "int16" `533 
f B "pwm_set_duty_percent" 1 563 "void(int16 percent)" `532 
f N "pwm_set_duty_percent" 1 564 ""
v L "stream" 1 564 "int8" `535 
v L "percent" 1 564 "int16" `536 
f B "pwm_set_duty_percent" 1 564 "void(int8 stream,int16 percent)" `534 
f N "pwm_set_frequency" 1 565 ""
v L "frequency" 1 565 "int32" `538 
f B "pwm_set_frequency" 1 565 "void(int32 frequency)" `537 
f N "pwm_set_frequency" 1 566 ""
v L "stream" 1 566 "int8" `540 
v L "frequency" 1 566 "int32" `541 
f B "pwm_set_frequency" 1 566 "void(int8 stream,int32 frequency)" `539  "#use capture() Prototypes:"
f N "get_capture_time" 1 569 ""
f B "get_capture_time" 1 569 "int16()" `542 
f N "get_capture_time" 1 570 ""
v L "stream" 1 570 "int8" `544 
f B "get_capture_time" 1 570 "int16(int8 stream)" `543 
f N "get_capture_event" 1 571 ""
f B "get_capture_event" 1 571 "int8()" `545 
f N "get_capture_event" 1 572 ""
v L "stream" 1 572 "int8" `547 
f B "get_capture_event" 1 572 "int8(int8 stream)" `546  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 585 ""
v L "address" 1 585 "int16" `549 
f B "goto_address" 1 585 "void(int16 address)" `548 
f N "label_address" 1 586 ""
v L "label" 1 586 "int16" `551 
f B "label_address" 1 586 "int16(int16 label)" `550  "Program Memory Prototypes:"
f N "read_program_memory" 1 589 ""
v L "address" 1 589 "int16" `553 
v L "dataptr" 1 589 "*int8" `554 
v L "count" 1 589 "int16" `555 
f B "read_program_memory" 1 589 "void(int16 address,*int8 dataptr,int16 count)" `552 
f N "read_program_eeprom" 1 590 ""
v L "address" 1 590 "int16" `557 
f B "read_program_eeprom" 1 590 "int16(int16 address)" `556 
f N "write_program_memory" 1 591 ""
v L "address" 1 591 "int16" `559 
v L "dataptr" 1 591 "*int8" `560 
v L "count" 1 591 "int16" `561 
f B "write_program_memory" 1 591 "void(int16 address,*int8 dataptr,int16 count)" `558 
f N "write_program_eeprom" 1 592 ""
v L "address" 1 592 "int16" `563 
v L "data" 1 592 "int16" `564 
f B "write_program_eeprom" 1 592 "void(int16 address,int16 data)" `562  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 597 "unsigned int16"
f N "read_eeprom" 1 602 ""
v L "address" 1 602 "int16" `566 
f B "read_eeprom" 1 602 "int8(int16 address)" `565 
f N "write_eeprom" 1 603 ""
v L "address" 1 603 "int16" `568 
v L "value" 1 603 "int8" `569 
f B "write_eeprom" 1 603 "void(int16 address,int8 value)" `567  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 610 ""
v L "interrupt" 1 610 "int32" `571 
f B "enable_interrupts" 1 610 "void(int32 interrupt)" `570 
f N "disable_interrupts" 1 611 ""
v L "interrupt" 1 611 "int32" `573 
f B "disable_interrupts" 1 611 "void(int32 interrupt)" `572 
f N "clear_interrupt" 1 612 ""
v L "interrupt" 1 612 "int32" `575 
f B "clear_interrupt" 1 612 "void(int32 interrupt)" `574 
f N "interrupt_active" 1 613 ""
v L "interrupt" 1 613 "int32" `577 
f B "interrupt_active" 1 613 "int8(int32 interrupt)" `576 
f N "interrupt_enabled" 1 614 ""
v L "interrupt" 1 614 "int32" `579 
f B "interrupt_enabled" 1 614 "int8(int32 interrupt)" `578 
f N "ext_int_edge" 1 615 ""
v L "source" 1 615 "int8" `581 
v L "edge" 1 615 "int8" `582 
f B "ext_int_edge" 1 615 "void(int8 source,int8 edge)" `580 
f N "jump_to_isr" 1 616 ""
v L "address" 1 616 "int16" `584 
f B "jump_to_isr" 1 616 "void(int16 address)" `583  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 618 "0x40"
d G "H_TO_L" 1 619 "0"
d G "GLOBAL" 1 621 "0x0BC0"
d G "PERIPH" 1 622 "0x0B40"
d G "INT_RTCC" 1 623 "0x000B20"
d G "INT_RB" 1 624 "0x00FF0B08"
d G "INT_EXT_L2H" 1 625 "0x50000B10"
d G "INT_EXT_H2L" 1 626 "0x60000B10"
d G "INT_EXT" 1 627 "0x000B10"
d G "INT_AD" 1 628 "0x008C40"
d G "INT_TBE" 1 629 "0x008C10"
d G "INT_RDA" 1 630 "0x008C20"
d G "INT_TIMER1" 1 631 "0x008C01"
d G "INT_TIMER2" 1 632 "0x008C02"
d G "INT_CCP1" 1 633 "0x008C04"
d G "INT_CCP2" 1 634 "0x008D01"
d G "INT_SSP" 1 635 "0x008C08"
d G "INT_PSP" 1 636 "0x008C80"
d G "INT_BUSCOL" 1 637 "0x008D08"
d G "INT_EEPROM" 1 638 "0x008D10"
d G "INT_TIMER0" 1 639 "0x000B20"
D G "CRC_16" 2 22 "0x8005" "bit pattern (1)1000 0000 0000 0101"
D G "CRC_CCITT" 2 23 "0x1021" "bit pattern (1)0001 0000 0010 0001"
D G "CRC_32" 2 24 "0x04C11DB7" "bit pattern (1)0000 0100 1100 0001 0001 1101 1011 0111"
F N "generate_8bit_crc" 2 27 ""
V L "data" 2 27 "*int8" `595 
V L "length" 2 27 "int16" `596 
V L "pattern" 2 27 "int8" `597 
F G "generate_8bit_crc" 2 28 "int8(*int8 data,int16 length,int8 pattern)" `594 
V L "current_data" 2 29 "*int8" `598 
V L "crc_byte" 2 30 "int8" `599 
V L "byte_counter" 2 31 "int16" `600 
V L "bit_counter" 2 32 "int8" `601 
F N "generate_16bit_crc" 2 69 ""
V L "data" 2 69 "*int8" `603 
V L "length" 2 69 "int16" `604 
V L "pattern" 2 69 "int16" `605 
F G "generate_16bit_crc" 2 70 "int16(*int8 data,int16 length,int16 pattern)" `602 
V L "current_data" 2 71 "*int8" `606 
V L "crc_Dbyte" 2 72 "int16" `607 
V L "byte_counter" 2 73 "int16" `608 
V L "bit_counter" 2 74 "int8" `609 
F N "generate_32bit_crc" 2 112 ""
V L "data" 2 112 "*int8" `611 
V L "length" 2 112 "int16" `612 
V L "pattern" 2 112 "int32" `613 
F G "generate_32bit_crc" 2 113 "int32(*int8 data,int16 length,int32 pattern)" `610 
V L "current_data" 2 114 "*int8" `614 
V L "crc_Dbyte" 2 115 "int32" `615 
V L "byte_counter" 2 116 "int16" `616 
V L "bit_counter" 2 117 "int8" `617 
D G "MASTER" 0 36 "0x11"
D G "SLAVE1" 0 37 "0x22"
D G "SLAVE2" 0 38 "0x33"
D G "SLAVE3" 0 39 "0x44"
D G "ack" 0 40 "0x01"
D G "NACK" 0 41 "0xFF"
D G "BUFFER_SIZE" 0 42 "64"
D G "CRC_KEY" 0 43 "0x55"
D G "gonder" 0 45 "pin_C4"
V G "buffer_tx" 0 47 "int8[64]" `618 
V G "buffer_rx" 0 48 "int8[64]" `619 
V G "i" 0 49 "int8" `620 
V G "j" 0 49 "int8" `621 
V G "k" 0 49 "int8" `622 
V G "num" 0 49 "int8" `623 
V G "P_Length" 0 50 "int8" `624 
V G "Error" 0 50 "int8" `625 
V G "new_packet" 0 50 "int8" `626 
V G "step" 0 52 "int8[8]" `627 
V G "speed" 0 53 "int8" `628 
V G "toggle" 0 54 "int8" `629 
F N "iletisim" 0 57 ""
F G "iletisim" 0 58 "void()" `630 
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
C L "iletisim" 0 60 1 "FUNCTION"
F N "send_packet" 0 85 ""
V L "packet_ptr" 0 85 "*int8" `632 
V L "packet_length" 0 85 "int16" `633 
F G "send_packet" 0 86 "void(*int8 packet_ptr,int16 packet_length)" `631 
V L "ptr" 0 87 "*int8" `634 
V L "CRC" 0 88 "int8" `635 
V L "i" 0 88 "int8" `636 
F N "create_packet" 0 105 ""
V L "slv" 0 105 "int8" `639 
V L "func" 0 105 "int8" `640 
V L "len" 0 105 "int8" `641 
V L "data" 0 105 "int8" `642 
F G "create_packet" 0 106 "void(int8 slv,int8 func,int8 len,int8 data)" `638 
F N "tam_tur_sag" 0 117 ""
F G "tam_tur_sag" 0 118 "void()" `643 
F N "tam_tur_sol" 0 132 ""
F G "tam_tur_sol" 0 133 "void()" `644 
F N "yarim_tur_sag" 0 147 ""
F G "yarim_tur_sag" 0 148 "void()" `645 
F N "yarim_tur_sol" 0 162 ""
F G "yarim_tur_sol" 0 163 "void()" `646 
F N "toggle_sag" 0 177 ""
F G "toggle_sag" 0 178 "void()" `647 
C L "toggle_sag" 0 60 1 "FUNCTION"
F N "toggle_sol" 0 191 ""
F G "toggle_sol" 0 192 "void()" `648 
C L "toggle_sol" 0 60 1 "FUNCTION"
F N "MAIN" 0 205 ""
F G "MAIN" 0 206 "void()" `649 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
